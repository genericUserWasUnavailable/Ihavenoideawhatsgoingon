/*
 * R e a d m e
 * -----------
 * 
 * In this file you can include any instructions or other comments you want to have injected onto the 
 * top of your final script. You can safely delete this file if you do not want any such comments.
 */

int TargAcq;
uint SystemStatus; // 0 = shutdown, 1 = seek, 2 = actively firing
uint counting;                                                  // integer counting and resetting to show the script is running and functioning
uint aimlocked;                                                 // integer counting up if gun is locked, but not firing, to change its targetting group
uint shutdown;                                                  // integer counting up if nothing is targetted to shutdown the PB (will be reset from CTC upon acquiring a target)
uint release; // count before releasing locks.
const double RayCMax = (double)2000;
//      const float UpperLimitRotor = 361f; // global value for upper limit, to be used with rotors.
//      const float LowerLimitRotor = -361f; // global value for lower limit, to be used with rotors.
//      const float UpperLimitPiston = 10f; // global value for upper limit, to be used with piston. DEBUG
//      const float LowerLimitPiston = 0f; // global value for lower limit, to be used with piston. DEBUG
const float GunPivotPistonStop = 0f; // PISTON STOPPING
                                     //        const float UpperLimitHinge = 90f; // global value for upper limit, to be used with hinges.
                                     //        const float LowerLimitHinge = -90f; // global value for lower limit, to be used with hinges.
bool AimTrue; // goes true if the CTC acquires a target AND is aimed at said target
bool HasTarget; // goes true if CTC has a target
bool IsUnderControl; // true if CTC is being player controlled
bool IsShooting; // true if weapons are actively firing
bool Alarm1; // true if alarm 1 is selected.
bool Alarm2;
bool GunsGO; // 'safety'
bool TargetFound;
readonly Color turretstatus_seeking = new Color(120, 120, 0); // colour change for weapon status
readonly Color turretstatus_engaged = new Color(200, 0, 0); // same
readonly Color turretstatus_offline = new Color(0, 0, 0); // same
/*
        --------------------------------
         NAMING OF BLOCKS GOES BELOW !!!!!!!!!!!!
        -------------------------------
        */
const string MGcam = "Camera_test_ToLCD"; // Turret's camera. Disable if not using camera!
const string GunCtrlsController = "MassiveTurret_Control Seat"; // Grid Main Cockpit if any
const string Azi = "MassiveTurret_Azimuth_Rotor"; // Azimuth controls block name setting
const string Ele = "MassiveTurret_Gun_Pivot"; // Elevation controls block name setting
const string EleHinge = "MassiveTurret_Pivot_Hinge"; // hinge for massive ordnance pivot
const string ctc = "CTC_MassiveTurret_CtrlStation"; // CTC controls block name setting
const string asb = "MassiveTurret_Alarm_Sound"; // Noisy-makey cally-whally.
const string testrig = "TestRig_"; // Beginning of block's CustomName.
string TarID = ""; // targetted grid's ID (Usually just type)
string TarID_relat = ""; // relationship with targetted entity (hopefully hostile)
string UniqueTarget = ""; // DEBUG TARGETING GROUP
string TarGroupsGet = ""; // DEBUG TARGETING GROUP
IMyCameraBlock MGCam;
IMyCockpit Ctrl;
IMyPistonBase GunPivotPiston;
IMyMotorStator GunAzimuthRotor;
IMyMotorStator GunPivotHinge;
IMyTurretControlBlock CTC;
IMySoundBlock ASB;
// ================== PISTON CONTROLLED AZI ENABLED BELOW =============== ALSO GYROS IF ANY =========== IF ROCKET PODS
bool GyroMode = false;
bool pistonAzi = false;
bool RocketMode = true;
bool toggleShoot = false;
const string pistonLeft = "AzimuthPiston_Left";
const string pistonRight = "AzimuthPiston_Right";
// ====================== SET TO TRUE IF USING PISTONS FOR CONTROL !!!!
IMyPistonBase PistonLeft;
IMyPistonBase PistonRight;
List<IMyGyro> GSM = new List<IMyGyro>(); // multiple gyros for stabilization.
List<IMyLightingBlock> TurretLights = new List<IMyLightingBlock>(); // Lights for weapon-status.
List<IMyUserControllableGun> Artillery = new List<IMyUserControllableGun>(); // Artillery weapons.
List<IMyUserControllableGun> Rockets = new List<IMyUserControllableGun>(); // For the rockets.
List<IMyLandingGear> MagLocks = new List<IMyLandingGear>(); // Mag-locks. CURRENTLY DISABLED BECAUSE CAUSING ERRORS
List<IMyTextPanel> _KillTrack = new List<IMyTextPanel>(); // Kill track screens.
StringBuilder meToString = new StringBuilder();
public Program()
{
    FetchGTS();
}
void FetchGTS() // Collects all blocks required for the script.
{
    MGCam = GridTerminalSystem.GetBlockWithName(MGcam) as IMyCameraBlock;
    Ctrl = GridTerminalSystem.GetBlockWithName(GunCtrlsController) as IMyCockpit;
    GunPivotPiston = GridTerminalSystem.GetBlockWithName(Ele) as IMyPistonBase;
    GunAzimuthRotor = GridTerminalSystem.GetBlockWithName(Azi) as IMyMotorStator;
    GunPivotHinge = GridTerminalSystem.GetBlockWithName(EleHinge) as IMyMotorStator;
    CTC = GridTerminalSystem.GetBlockWithName(ctc) as IMyTurretControlBlock;
    ASB = GridTerminalSystem.GetBlockWithName(asb) as IMySoundBlock;
    if (pistonAzi)
    {
        PistonLeft = GridTerminalSystem.GetBlockWithName(pistonLeft) as IMyPistonBase;
        PistonRight = GridTerminalSystem.GetBlockWithName(pistonRight) as IMyPistonBase;
    }
    /*
            -------------------------------------------
            WEAPONS AND LIGHTS BUNDLES FOR TURRET; BE SPECIFIC WHEN NAMING  !!!!!!!!!
            -------------------------------------------
            ALSO GYROS IF GYROMODE BELOW
             */
    if (GyroMode)
    {
        GridTerminalSystem.GetBlocksOfType(GSM, gsm => gsm.CustomName.StartsWith(testrig));
    }
    GridTerminalSystem.GetBlocksOfType(Artillery, Gun => Gun.CustomName.StartsWith(testrig) && Gun.CustomName.Contains("rtillery"));
    GridTerminalSystem.GetBlocksOfType(TurretLights, turLig => turLig.CustomName.StartsWith(testrig));
    GridTerminalSystem.GetBlocksOfType(MagLocks, mAgloc => mAgloc.CustomName.StartsWith(testrig));// Needs fixing it seems
    GridTerminalSystem.GetBlocksOfType(_KillTrack, KT => KT.CustomName.EndsWith("_KillTrack"));
    GridTerminalSystem.GetBlocksOfType(Rockets, x=>x.CustomName.StartsWith(testrig) && x.CustomName.Contains("ocket"));
    Runtime.UpdateFrequency = UpdateFrequency.Once;
}
void WakeUp() // Response to being targeted.  TARGETING GROUPS ARE: Weapons; Propulsion, PowerSystems, Default <===================== TARGETING GROUP OPTIONS
{

    if (SystemStatus == 1)
    {
        CTC.SetTargetingGroup("Weapons");
    }
    else
    {
        CTC.SetTargetingGroup("PowerSystems");
        SystemStatus = 1;
    }
    string MeSurface = Me.GetSurface(0).ToString();
    if (!MeSurface.EndsWith("Engaged"))
    {
        Me.GetSurface(0).WriteText("Hostiles\nEngaged");
    }
    release = 0;
    counting = 0;
    shutdown = 0;
    aimlocked = 0;
    if (ASB.SelectedSound != "AI_warning louder")
    {
        ASB.SelectedSound = "AI_warning louder";
        ASB.Play();
    }
    if (HasTarget)
    {
        TarGroupsGet = CTC.GetTargetingGroup();
    }
    UnlockTurret();
}
public void Main(string argument, UpdateType updateSource)
{
    Runtime.UpdateFrequency = GunsGO || IsUnderControl ? UpdateFrequency.Update1 : HasTarget ? UpdateFrequency.Update10 : UpdateFrequency.Update100;
    Alarm1 = ASB.SelectedSound != "Alert 1";
    Alarm2 = ASB.SelectedSound != "Alert 2";
    IsUnderControl = CTC.IsUnderControl;
    HasTarget = CTC.HasTarget;
    IsShooting = Artillery.Any(x => x.IsShooting);
    GunsGO = MagLocks.Any(x=>x.IsLocked);
    if (GunsGO)
    {
        SystemStatus = 2;
    }
    Echo($"{HasTarget}\n" + SystemStatus + "\n"); // strictly debugg info
    counting++;
    if (!AimTrue && !IsUnderControl)
    {
        foreach (IMyLandingGear magLock in MagLocks)
        {
            magLock.Unlock();
        }
    }
    if (argument.Contains('1'))
    {
        if (IsUnderControl)
        {
            toggleShoot = !toggleShoot;
            if (toggleShoot)
            {
                LockTurret();
                SystemStatus = 2;
            }
            else
            {
                UnlockTurret();
                SystemStatus = 1;
            }
        }
        else
        {
            Me.GetSurface(0).WriteText($"{(HasTarget ? $"Hostiles\nEngaged:\n{TarID}\n{(IsShooting ? "Weapons GO!" : "Locking\non target")}" : "")}"); /// include in stringbuilder
            shutdown = 0;
            release = 0;
            AimTrue = true;
            Echo($"Hostiles Engaged: \n{TarID}");
            if (SystemStatus != 2 && (AimTrue || IsUnderControl))
            {
                SystemStatus = 2;
            }
            else
            {
                SystemStatus = 1;
            }
        }
        foreach (IMyLightingBlock lights in TurretLights)
        {
            lights.Color = IsShooting ? turretstatus_engaged : HasTarget ? turretstatus_seeking : turretstatus_offline;
        }
    }
    if (argument == "0")
    {
        if (Alarm1 && !GunsGO)
        {
            ASB.SelectedSound = "Alert 1";
            ASB.Play();
        }
        SystemStatus = 1;
        UnlockTurret();
        foreach (IMyLightingBlock lights in TurretLights)
        {
            lights.Color = IsShooting ? turretstatus_engaged : HasTarget ? turretstatus_seeking : turretstatus_offline;
        }
    }
    if (argument.Contains("bat"))
    {
        WakeUp();
        foreach (IMyLightingBlock lights in TurretLights)
        {
            lights.Color = IsShooting ? turretstatus_engaged : HasTarget ? turretstatus_seeking : turretstatus_offline;
        }
    }
    if (SystemStatus > 0)
    {
        if (HasTarget && AimTrue || SystemStatus > 1)
        {
            if (!GunsGO)
            {
                LockTurret();
                Echo($"{(HasTarget ? $"Hostiles Engaged: {TarID}" : "")}\n{(HasTarget ? $"{TarID_relat}" : "")}\n");    // add to strin builder unit.
                foreach (IMyLightingBlock lights in TurretLights)
                {
                    lights.Color = IsShooting ? turretstatus_engaged : HasTarget ? turretstatus_seeking : turretstatus_offline;
                }
            }
            else
            {
                TargetAcquired();
                foreach (IMyLightingBlock lights in TurretLights)
                {
                    lights.Color = IsShooting ? turretstatus_engaged : HasTarget ? turretstatus_seeking : turretstatus_offline;
                }
            }
        }
        if (SystemStatus > 0)
        {
            if (aimlocked > 125)
            {
                AimTrue = false;
                UnlockTurret();
                foreach (IMyLightingBlock lights in TurretLights)
                {
                    lights.Color = IsShooting ? turretstatus_engaged : HasTarget ? turretstatus_seeking : turretstatus_offline;
                }
            }
            if (!HasTarget && !IsUnderControl)
            {
                if (SystemStatus != 0)
                {
                    SystemStatus--;
                }
                foreach (IMyLightingBlock lights in TurretLights)
                {
                    lights.Color = IsShooting ? turretstatus_engaged : HasTarget ? turretstatus_seeking : turretstatus_offline;
                }
            }
        }
        if (!HasTarget && !IsUnderControl && Runtime.UpdateFrequency == UpdateFrequency.Update100)
        {
            {
                shutdown++;
                if (shutdown > 7)
                {
                    SystemStatus = 0;
                    Runtime.UpdateFrequency = UpdateFrequency.Once;
                }
            }
        }
        if (counting > 19)
        {
            counting = 0;
        }
        if (HasTarget)
        {
            if (TarID == "")
            {
                TarID = CTC.GetTargetedEntity().Name;
                TarID_relat = CTC.GetTargetedEntity().Relationship.ToString();
            }
        }
        if (!AimTrue && !IsUnderControl)
        {
            foreach (IMyUserControllableGun Artillery in Artillery)
            {
                Artillery.Shoot = false;
            }
            if (RocketMode)
            {
                foreach (IMyUserControllableGun rockets in Rockets)
                {
                    rockets.Shoot = false;
                }
            }
        }
        if (!IsShooting && GunsGO)
        {
            aimlocked++;
        }
        if (IsShooting && (AimTrue || IsUnderControl))
        {
            aimlocked = 0;
            release = 0;
        }
        if (HasTarget || IsUnderControl)
        {
            shutdown = 0;
            if (SystemStatus == 0)
            {
                SystemStatus = 1;
            }
        }
        if (AimTrue && GunsGO && !IsShooting && !IsUnderControl)
        {
            if ((aimlocked > 19 && Runtime.UpdateFrequency == UpdateFrequency.Update10) || (
                aimlocked > 4 && Runtime.UpdateFrequency == UpdateFrequency.Update100) || (aimlocked > 419 && Runtime.UpdateFrequency == UpdateFrequency.Update1))
            {
                CycleTargetingGroups();
            }
        }
        if (SystemStatus < 2)
        {
            PistonUpdateElevation();
            if (pistonAzi)
            {
                PistonUpdateAzimuth();
            }
        }
        Echo(counting < 5 ? "." : counting < 10 ? ".." : "...");
        Echo(IsUnderControl ? "" : HasTarget ? "" : "shutdown at 10: " + $"{shutdown}");
        Echo(IsUnderControl ? "" : $"Subsystem refresh at {(Runtime.UpdateFrequency == UpdateFrequency.Update1 ? "420" : Runtime.UpdateFrequency == UpdateFrequency.Update10 ? "20" : "5")}: {aimlocked}");
        Echo(IsUnderControl ? "" : HasTarget ? "" : $"Gunlocks releasing at {(Runtime.UpdateFrequency == UpdateFrequency.Update1 ? "114" : Runtime.UpdateFrequency == UpdateFrequency.Update10 ? "14" : "5")}: {release}");
        Echo($"{SystemStatus}");                                    // ALL OF THE ABOVE INTO THE STRINGBUILDER
        if (!IsUnderControl && !IsShooting && HasTarget)
        {
            release++;
        }
        if (release > 114 && Runtime.UpdateFrequency == UpdateFrequency.Update1)
        { UnlockTurret(); }
        if (release > 14 && Runtime.UpdateFrequency == UpdateFrequency.Update10)
        { UnlockTurret(); }
        if (release > 5 && Runtime.UpdateFrequency == UpdateFrequency.Update100)
        { UnlockTurret(); }
        if (IsUnderControl || Ctrl.IsUnderControl)
        {
            foreach (IMyTextPanel killscreen in _KillTrack)
            {
                float RoundedPivot = (float)Math.Round(GunPivotPiston.CurrentPosition, 2);
                float RoundedAzi = (float)Math.Round(GunAzimuthRotor.Angle, 2);
                killscreen.WriteText($"{(HasTarget ? $"Targets Engaged:\n{TarID}\n{TarID_relat}\nGun Position:\nEle: {RoundedPivot}\nAzi: {RoundedAzi}" : $"Gun Position:\nEle: {RoundedPivot}\nAzi: {RoundedAzi}")}\n");
            }
        }
    }
    else
    {
        Echo("Program Terminated\n");
        Me.GetSurface(0).WriteText($"Session\nComplete\n");
        foreach (IMyTextPanel killtrackers in _KillTrack)
        {
            float RoundedPivot = (float)Math.Round(GunPivotPiston.CurrentPosition, 2);
            float RoundedAzi = (float)Math.Round(GunAzimuthRotor.Angle, 2);
            killtrackers.WriteText($"Session\nComplete\n\nGun Position:\nEle: {RoundedPivot}\nAzi: {RoundedAzi}");
        }
        foreach (IMyLightingBlock lights in TurretLights)
        {
            lights.Color = IsShooting ? turretstatus_engaged : HasTarget ? turretstatus_seeking : turretstatus_offline;
        }
        UnlockTurret();
        GunPivotPiston.Velocity = GunPivotPistonStop;
        GunAzimuthRotor.RotorLock = false;
        if (shutdown > 4)
        {
            ASB.SelectedSound = "Objective complete";
            ASB.Play();
            shutdown = 3;
        }
        //                    TarGroupsGet = CTC.GetTargetingGroup().ToString();
        Echo($"{TarGroupsGet}"); //                                DEBUGGING TARGETING GROUP SETS
        if (!meToString.ToString().EndsWith("\n"))
        {
            meToString.AppendFormat(IsUnderControl ? "" : HasTarget ? "" : "shutdown at 10: " + $"{shutdown}\n");
        }
    }
}
void UnlockTurret() // method for unlocking azimuth+elevation hinges/rotors
{
    CTC.AngleDeviation = .8f;
    GunPivotHinge.Enabled = true;
    GunPivotPiston.Enabled = true;
    if (pistonAzi)
    {
        PistonLeft.Enabled = true;
        PistonRight.Enabled = true;
    }
    release = 0;
    TargAcq = 0;
    GunsGO = false;
    foreach (IMyUserControllableGun Artillery in Artillery)
    {
        Artillery.Shoot = false;
    }
    if (RocketMode)
    {
        foreach (IMyUserControllableGun rockets in Rockets)
        {
            rockets.Shoot = false;
        }
    }
    if (GyroMode)
    {
        foreach (IMyGyro gsm in GSM)
        {
            gsm.GyroOverride = false;
        }
    }
    foreach (IMyLandingGear maglock in MagLocks)
    {
        maglock.Unlock();
    }
}
void LockTurret() // method for locking azimuth+elevation hinges/rotors
{
    if (!GunsGO)
    {
        GunPivotHinge.Enabled = false;
        GunPivotPiston.Velocity = GunPivotPistonStop;
        if (pistonAzi)
        {
            PistonLeft.Velocity = GunPivotPistonStop;
            PistonLeft.Enabled = false;
            PistonRight.Enabled = false;
        }
        if (GyroMode)
        {
            foreach (IMyGyro gsm in GSM)
            {
                gsm.GyroOverride = true;
            }
        }
        if (CTC.IsAimed || CTC.IsUnderControl)
        {
            foreach (IMyLandingGear maglock in MagLocks)
            {
                maglock.Lock();
            }
        }
    }
    else
    {
        if (SystemStatus > 1)
        {
            TargetAcquired();
        }
    }
}
public void TargetAcquired() // Initiation of weaponry.
{
    release = 0;
    if (TargAcq < 3)
    {
        TargAcq++;
        if (Alarm2 && GunsGO)
        {
            ASB.SelectedSound = "Alert 2";
            ASB.Play();
            Alarm2 = false;
        }
        foreach (IMyUserControllableGun Artillery in Artillery)
        {
            Artillery.Shoot = true;
        }
        if (RocketMode)
        {
            //if (CTC.GetTargetedEntity().)
            if (MGCam.Raycast(800, 0, 0).Relationship.HasFlag(MyRelationsBetweenPlayerAndBlock.Enemies | MyRelationsBetweenPlayerAndBlock.Neutral))
            {
                foreach (IMyUserControllableGun rockets in Rockets)
                {
                    rockets.Shoot = true;
                }
            }
        }
    }
}
void PistonUpdateElevation()
{
    if (GunPivotHinge.TargetVelocityRPM < 0f)
    {
        if (GunPivotPiston.Velocity < 0)
        {
            GunPivotPiston.Velocity = 0f;
            GunPivotPiston.Enabled = true;
        }
        else
        {
            GunPivotPiston.Velocity += 0.015f;
        }
    }
    else if (GunPivotHinge.TargetVelocityRPM > 0f)
    {
        if (GunPivotPiston.Velocity > 0)
        {
            GunPivotPiston.Velocity = 0f;
            GunPivotPiston.Enabled = true;
        }
        else
        {
            GunPivotPiston.Velocity += -0.015f;
        }
    }
    else
    {
        GunPivotPiston.Velocity = GunPivotPistonStop;
    }
}
void PistonUpdateAzimuth()
{
    if (GunAzimuthRotor.TargetVelocityRPM > 0f)
    {
        if (PistonLeft.Velocity < 0f)
        {
            PistonLeft.Velocity = 0f;
        }
        else
        {
            PistonLeft.Velocity += 0.01f;
        }
    }
    else if (GunAzimuthRotor.TargetVelocityRPM < 0f)
    {
        if (PistonLeft.Velocity > 0f)
        {
            PistonLeft.Velocity = 0f;
        }
        else
        {
            PistonLeft.Velocity -= 0.01f;
        }
    }
    else
    {
        PistonLeft.Velocity = GunPivotPistonStop;
    }
    PistonRight.Velocity = (PistonLeft.Velocity * PistonLeft.CurrentPosition) * -1;
}
void CycleTargetingGroups()
{
    if (CTC.GetTargetingGroup().Contains("ault"))
    {
        CTC.ApplyAction("TargetingGroup_CycleSubsystems");
    }
    else
    {
        if (IsUnderControl || (AimTrue && !IsShooting))
        {
            //AimTrueLock();
            CTC.ApplyAction("TargetingGroup_CycleSubsystems");
            aimlocked = 0;
        }
        else
        {
            CTC.ApplyAction("TargetingGroup_CycleSubsystems");
            aimlocked = 0;
        }
    }
}
void AimTrueLock() //  CTC.GetTargetedEntity().Relationship.ToString();
{
    if (MGCam.AvailableScanRange >= RayCMax)
    {
        TargetFound = MGCam.Raycast(RayCMax).Relationship.ToString().Contains("ostile") || MGCam.Raycast(RayCMax).Relationship.ToString().Contains("nemie");
        if (TargetFound)
        {
            TargetAcquired();
        }
    }
}
